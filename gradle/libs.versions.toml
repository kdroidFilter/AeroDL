[versions]
# Kotlin & Compose
kotlin = "2.2.20"
composeMultiplatform = "1.9.0"
composeHotReload = "1.0.0-rc02"

# AndroidX
androidx-lifecycle = "2.9.4"
navigation = "2.9.0"

# Testing
junit = "4.13.2"

# Kotlin extensions
kotlinx-coroutines = "1.10.2"
serialization-json = "1.9.0"
cardiologist = "0.8.0"

# UI Libraries
fluent = "v0.1.0"
composemediaplayer = "0.8.4"
composenativetray = "1.0.4"

# Network & Tools
ktor = "3.3.0"
platformtools = "0.7.3"
metro = "0.6.6"
jvmNativeTrustedRoots = "1.1.7"

# Koin
koin = "4.1.1"

# Database
sqlDelight = "2.1.0"

# Additional dependencies
coil = "3.3.0"
autolaunch = "0.7.0"
filekit = "0.12.0"
multiplatform-settings = "1.3.0"
knotify = "0.4.2"
confettikit = "0.6.0"


hydraulicConveyor = "1.12"
buildConfig = "5.7.0"


[libraries]
# Kotlin & Testing
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-testJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { module = "junit:junit", version.ref = "junit" }

# AndroidX
androidx-lifecycle-viewmodelCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtimeCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-navigation-compose = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigation" }

# Coroutines
kotlinx-coroutinesSwing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }

# UI Libraries
compose-fluent = { module = "io.github.compose-fluent:fluent", version.ref = "fluent" }
compose-fluent-icons-extended = { module = "io.github.compose-fluent:fluent-icons-extended", version.ref = "fluent" }
composemediaplayer = { module = "io.github.kdroidfilter:composemediaplayer", version.ref = "composemediaplayer" }
composenativetray = { module = "io.github.kdroidfilter:composenativetray", version.ref = "composenativetray" }

# Platform Tools
platformtools-core = { module = "io.github.kdroidfilter:platformtools.core", version.ref = "platformtools" }
platformtools-darkmodedetector = { module = "io.github.kdroidfilter:platformtools.darkmodedetector", version.ref = "platformtools" }
platformtools-clipboardmanager = { module = "io.github.kdroidfilter:platformtools.clipboardmanager", version.ref = "platformtools" }
platformtools-releasefetcher = { module = "io.github.kdroidfilter:platformtools.releasefetcher", version.ref = "platformtools" }
platformtools-appmanager = { module = "io.github.kdroidfilter:platformtools.appmanager", version.ref = "platformtools" }

# Additional libraries
coil = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coil-network = { module = "io.coil-kt.coil3:coil-network-okhttp", version.ref = "coil" }
autolaunch = { module = "io.github.vinceglb:auto-launch", version.ref = "autolaunch" }
confettikit = { module = "io.github.vinceglb:confettikit", version.ref = "confettikit" }
filekit-core = { module = "io.github.vinceglb:filekit-core", version.ref = "filekit" }
filekit-dialogs = { module = "io.github.vinceglb:filekit-dialogs", version.ref = "filekit" }
filekit-dialogs-compose = { module = "io.github.vinceglb:filekit-dialogs-compose", version.ref = "filekit" }
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatform-settings" }
knotify = { module = "io.github.kdroidfilter:knotify", version.ref = "knotify" }
knotify-compose = { module = "io.github.kdroidfilter:knotify-compose", version.ref = "knotify" }

cardiologist = { module = "io.github.kevincianfarini.cardiologist:cardiologist", version.ref = "cardiologist" }


# Ktor
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

# Koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koin-compose-viewmodel = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koin" }


# Serialization
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization-json" }

sqlDelight-driver-sqlite = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqlDelight" }

# Security
jvm-native-trusted-roots = { module = "org.jetbrains.nativecerts:jvm-native-trusted-roots", version.ref = "jvmNativeTrustedRoots" }

[plugins]
composeHotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "composeHotReload" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "composeMultiplatform" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
metro = { id = "dev.zacsweers.metro", version.ref = "metro" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
sqlDelight = { id = "app.cash.sqldelight", version.ref = "sqlDelight" }
hydraulicConveyor = { id = "dev.hydraulic.conveyor", version.ref = "hydraulicConveyor" }
buildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfig" }
